using Microsoft.EntityFrameworkCore;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using TelegramMiniAppBackend.Data;
using TelegramMiniAppBackend.Models;

namespace TelegramMiniAppBackend.Services;

public class TelegramBotService
{
    private readonly TelegramBotClient _botClient;
    private readonly AppDbContext _dbContext;
    private readonly ILogger<TelegramBotService> _logger;

    public TelegramBotService(TelegramBotClient botClient, AppDbContext dbContext, ILogger<TelegramBotService> logger)
    {
        _botClient = botClient;
        _dbContext = dbContext;
        _logger = logger;
    }

    public async Task NotifyNewOrder(Order order)
    {
        var notificationChats = await _dbContext.NotificationChats.ToListAsync();

        var message = $@"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>
–¢–∏–ø: {(order.Type == "buy" ? "–ü–æ–∫—É–ø–∫–∞" : "–ü—Ä–æ–¥–∞–∂–∞")}
–í–∞–ª—é—Ç–∞: {order.Currency}
–ë–∞–Ω–∫: {order.Bank}
–°—É–º–º–∞: {order.Amount}
–ö–æ–Ω—Ç–∞–∫—Ç: {order.ContactInfo}";

        foreach (var chat in notificationChats)
        {
            try
            {
                await _botClient.SendTextMessageAsync(
                    chatId: chat.ChatId,
                    text: message,
                    parseMode: ParseMode.Html,
                    cancellationToken: CancellationToken.None
                );
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {ChatId}", chat.ChatId);
            }
        }
    }
}
