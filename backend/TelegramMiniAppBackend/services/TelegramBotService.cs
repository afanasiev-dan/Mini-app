using Microsoft.EntityFrameworkCore;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using TelegramMiniAppBackend.Data;
using TelegramMiniAppBackend.Models;

namespace TelegramMiniAppBackend.Services;

public class TelegramBotService
{
    private readonly TelegramBotClient _botClient;
    private readonly ClientService _clientService;
    private readonly AppDbContext _dbContext;
    private readonly ILogger<TelegramBotService> _logger;

    public TelegramBotService(
        TelegramBotClient botClient,
        ClientService clientService,
        AppDbContext dbContext,
        ILogger<TelegramBotService> logger)
    {
        _botClient = botClient;
        this._clientService = clientService;
        _dbContext = dbContext;
        _logger = logger;
    }

    public async Task NotifyNewOrder(Order order)
    {
        var notificationChats = await _dbContext.NotificationChats.ToListAsync();

        var message = $@"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>
        –¢–∏–ø: {(order.Type == "buy" ? "–ü–æ–∫—É–ø–∫–∞" : "–ü—Ä–æ–¥–∞–∂–∞")}
      –í–∞–ª—é—Ç–∞: {order.Currency}
              –ë–∞–Ω–∫: {order.Bank}
                    –°—É–º–º–∞: {order.Amount}
                           –ö–æ–Ω—Ç–∞–∫—Ç: {order.ContactInfo}";

        foreach (var chat in notificationChats)
        {
            try
            {
                await _botClient.SendMessage(
                    chatId: chat.ChatId,
                    text: message,
                    parseMode: ParseMode.Html,
                    cancellationToken: CancellationToken.None
                    );
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {ChatId}", chat.ChatId);
            }
        }
    }

    public async Task HandleUpdateAsync(Update update)
        {
            try
            {
                _logger.LogInformation("Processing update of type: {UpdateType}", update.Type);
                
                switch (update.Type)
                {
                    case UpdateType.Message:
                        if (update.Message != null)
                        {
                            await HandleMessageAsync(update.Message);
                        }
                        else
                        {
                            _logger.LogWarning("Message in update is null");
                        }
                        break;
                    case UpdateType.CallbackQuery:
                        if (update.CallbackQuery != null)
                        {
                            await HandleCallbackQueryAsync(update.CallbackQuery);
                        }
                        else
                        {
                            _logger.LogWarning("CallbackQuery in update is null");
                        }
                        break;
                    case UpdateType.InlineQuery:
                        if (update.InlineQuery != null)
                        {
                            await HandleInlineQueryAsync(update.InlineQuery);
                        }
                        else
                        {
                            _logger.LogWarning("InlineQuery in update is null");
                        }
                        break;
                    default:
                        _logger.LogInformation("Received unsupported update type: {UpdateType}", update.Type);
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing update of type: {UpdateType}", update.Type);
            }
        }

        private async Task HandleMessageAsync(Message message)
        {
            if (message.Text == null)
            {
                _logger.LogInformation("Received message without text");
                return;
            }

            _logger.LogInformation("Received message: {MessageText} from user {UserId} (@{Username})", 
                message.Text, 
                message.From?.Id, 
                message.From?.Username);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (message.Text.StartsWith('/'))
            {
                _logger.LogInformation("Processing command: {Command}", message.Text.Split(' ')[0]);
                await HandleCommandAsync(message);
            }
            else
            {
                _logger.LogInformation("Processing regular message");
                // –ê–Ω–∞–ª–∏–∑ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await AnalyzeAndRespondToMessage(message);
            }
        }

        private async Task HandleCommandAsync(Message message)
        {
            var commandParts = message.Text.Split(' ');
            var command = commandParts[0].ToLower();
            var commandArgs = commandParts.Length > 1 ? string.Join(" ", commandParts.Skip(1)) : "";

            _logger.LogInformation("Processing command: {Command} with args: {Args} from chat: {ChatId}", 
                command, commandArgs, message.Chat.Id);

            switch (command)
            {
                case "/start":
                    _logger.LogInformation("Sending /start response to chat: {ChatId}", message.Chat.Id);
                    var clientExist = await _clientService.ClientExistsAsync(message.From.Id);
                if (clientExist is false)
                {
                    ClientModel newClient = new ClientModel
                    {
                        TelegramId = message.From.Id,
                        Username = message.From.Username,
                        FullName = message.From.FirstName + " " + message.From.LastName
                    };
                    await _clientService.AddClientAsync(newClient);
                }
                    
                    await _botClient.SendMessage(
                        message.Chat.Id,
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.",
                        cancellationToken: CancellationToken.None);
                    break;
                case "/help":
                    _logger.LogInformation("Sending /help response to chat: {ChatId}", message.Chat.Id);
                    await _botClient.SendMessage(
                        message.Chat.Id,
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ø–æ–º–æ—â—å\n/analyze - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç",
                        cancellationToken: CancellationToken.None);
                    break;
                default:
                    _logger.LogInformation("Sending unknown command response to chat: {ChatId}", message.Chat.Id);
                    await _botClient.SendMessage(
                        message.Chat.Id,
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                        cancellationToken: CancellationToken.None);
                    break;
            }
        }

        private async Task AnalyzeAndRespondToMessage(Message message)
        {
            // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            var text = message.Text.ToLower();
            var response = AnalyzeMessageText(text);

            if (!string.IsNullOrEmpty(response))
            {
                await _botClient.SendMessage(message.Chat.Id, response);
            }
        }

        private string AnalyzeMessageText(string text)
        {
            // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
            if (text.Contains("–ø—Ä–∏–≤–µ—Ç") || text.Contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"))
                return "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?";
            
            if (text.Contains("–ø–æ–≥–æ–¥–∞"))
                return "–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –æ –ø–æ–≥–æ–¥–µ –ª—É—á—à–µ —Å–ø—Ä–æ—Å–∏—Ç—å —É –º–µ—Ç–µ–æ—Å–µ—Ä–≤–∏—Å–∞ :)";
            
            if (text.Contains("–∫–∞–∫ –¥–µ–ª–∞") || text.Contains("–∫–∞–∫ —Ç—ã"))
                return "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ó–∞–Ω–∏–º–∞—é—Å—å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π.";

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å
            return null;
        }

        private async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
            await _botClient.AnswerCallbackQuery(callbackQuery.Id);
            await _botClient.SendMessage(
                callbackQuery.Message.Chat.Id,
                $"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: {callbackQuery.Data}");
        }

        private async Task HandleInlineQueryAsync(InlineQuery inlineQuery)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–æ–≤
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É
        }
}
